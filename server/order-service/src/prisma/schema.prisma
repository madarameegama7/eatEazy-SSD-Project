generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model cartitems {
  ID         Int       @id @default(autoincrement())
  CartID     Int
  MenuItemID Int
  Quantity   Int
  carts      carts     @relation(fields: [CartID], references: [CartID], onDelete: Cascade, onUpdate: Restrict, map: "FK_Cart_CartItem")
  menuitems  menuitems @relation(fields: [MenuItemID], references: [MenuItemID], onDelete: Cascade, onUpdate: Restrict, map: "FK_Menu_CartItem")

  @@index([CartID], map: "FK_Cart_CartItem")
  @@index([MenuItemID], map: "FK_Menu_CartItem")
}

model carts {
  CartID    Int         @id @default(autoincrement())
  UserID    Int
  CreatedAt DateTime?   @default(now()) @db.DateTime(0)
  cartitems cartitems[]
  users     users       @relation(fields: [UserID], references: [UserID], onDelete: Cascade, onUpdate: Restrict, map: "carts_ibfk_1")

  @@index([UserID], map: "UserID")
}

model delivery {
  DeliveryID       Int                     @id @default(autoincrement())
  OrderID          Int?
  DeliveryPersonID Int?
  AssignedAt       DateTime?               @default(now()) @db.DateTime(0)
  DeliveredAt      DateTime?               @db.DateTime(0)
  DeliveryStatus   delivery_DeliveryStatus
  orders           orders?                 @relation(fields: [OrderID], references: [OrderID], onDelete: Cascade, onUpdate: Restrict, map: "delivery_ibfk_1")
  users            users?                  @relation(fields: [DeliveryPersonID], references: [UserID], onUpdate: Restrict, map: "delivery_ibfk_2")
  deliveryroutes   deliveryroutes[]

  @@index([DeliveryPersonID], map: "DeliveryPersonID")
  @@index([OrderID], map: "OrderID")
}

model deliveryroutes {
  RouteID       Int                  @id @default(autoincrement())
  DeliveryID    Int?
  StartLocation Unsupported("point")
  EndLocation   Unsupported("point")
  delivery      delivery?            @relation(fields: [DeliveryID], references: [DeliveryID], onDelete: Cascade, onUpdate: Restrict, map: "deliveryroutes_ibfk_1")

  @@index([DeliveryID], map: "DeliveryID")
}

model menuitems {
  MenuItemID   Int            @id @default(autoincrement())
  RestaurantID Int?
  Name         String         @db.VarChar(255)
  Description  String?        @db.Text
  Price        Decimal        @db.Decimal(10, 2)
  IsAvailable  Boolean?       @default(true)
  cartitems    cartitems[]
  restaurants  restaurants?   @relation(fields: [RestaurantID], references: [RestaurantID], onDelete: Cascade, onUpdate: Restrict, map: "menuitems_ibfk_1")
  orderdetails orderdetails[]

  @@index([RestaurantID], map: "RestaurantID")
}

model notifications {
  NotificationID   Int       @id @default(autoincrement())
  UserID           Int?
  Message          String    @db.Text
  NotificationDate DateTime? @default(now()) @db.DateTime(0)
  IsRead           Boolean?  @default(false)
  users            users?    @relation(fields: [UserID], references: [UserID], onDelete: Cascade, onUpdate: Restrict, map: "notifications_ibfk_1")

  @@index([UserID], map: "UserID")
}

model orderdetails {
  OrderDetailID Int        @id @default(autoincrement())
  OrderID       Int?
  MenuItemID    Int?
  Quantity      Int
  ItemPrice     Decimal    @db.Decimal(10, 2)
  orders        orders?    @relation(fields: [OrderID], references: [OrderID], onDelete: Cascade, onUpdate: Restrict, map: "orderdetails_ibfk_1")
  menuitems     menuitems? @relation(fields: [MenuItemID], references: [MenuItemID], onDelete: Cascade, onUpdate: Restrict, map: "orderdetails_ibfk_2")

  @@index([MenuItemID], map: "MenuItemID")
  @@index([OrderID], map: "OrderID")
}

model orders {
  OrderID      Int                @id @default(autoincrement())
  CustomerID   Int?
  RestaurantID Int?
  OrderStatus  orders_OrderStatus
  OrderTotal   Decimal            @db.Decimal(10, 2)
  OrderDate    DateTime?          @default(now()) @db.DateTime(0)
  delivery     delivery[]
  orderdetails orderdetails[]
  users        users?             @relation(fields: [CustomerID], references: [UserID], onDelete: Cascade, onUpdate: Restrict, map: "orders_ibfk_1")
  restaurants  restaurants?       @relation(fields: [RestaurantID], references: [RestaurantID], onDelete: Cascade, onUpdate: Restrict, map: "orders_ibfk_2")
  payments     payments[]

  @@index([CustomerID], map: "CustomerID")
  @@index([RestaurantID], map: "RestaurantID")
}

model payments {
  PaymentID     Int                    @id @default(autoincrement())
  OrderID       Int?
  PaymentMethod payments_PaymentMethod
  PaymentStatus payments_PaymentStatus
  TransactionID String                 @db.VarChar(255)
  PaymentDate   DateTime?              @default(now()) @db.DateTime(0)
  orders        orders?                @relation(fields: [OrderID], references: [OrderID], onDelete: Cascade, onUpdate: Restrict, map: "payments_ibfk_1")

  @@index([OrderID], map: "OrderID")
}

model restaurants {
  RestaurantID   Int         @id @default(autoincrement())
  OwnerID        Int?
  RestaurantName String      @db.VarChar(255)
  Address        String      @db.Text
  Phone          String?     @db.VarChar(15)
  Email          String?     @db.VarChar(255)
  Availability   String      @db.VarChar(255)
  menuitems      menuitems[]
  orders         orders[]
  users          users?      @relation(fields: [OwnerID], references: [UserID], onUpdate: Restrict, map: "restaurants_ibfk_1")

  @@index([OwnerID], map: "OwnerID")
}

model users {
  UserID        Int             @id @default(autoincrement())
  Firstname     String          @db.VarChar(255)
  Lastname      String          @db.VarChar(255)
  PasswordHash  String          @db.VarChar(255)
  Email         String          @unique(map: "Email") @db.VarChar(255)
  Phone         String?         @db.VarChar(15)
  Role          users_Role
  carts         carts[]
  delivery      delivery[]
  notifications notifications[]
  orders        orders[]
  restaurants   restaurants[]
}

enum payments_PaymentMethod {
  PayHere
  Dialog_Genie @map("Dialog Genie")
  FriMi
  Stripe
  PayPal
}

enum orders_OrderStatus {
  Pending
  Confirmed
  Preparing
  Out_for_Delivery @map("Out for Delivery")
  Delivered
  Cancelled
}

enum payments_PaymentStatus {
  Pending
  Completed
  Failed
}

enum delivery_DeliveryStatus {
  Assigned
  In_Transit @map("In Transit")
  Delivered
  Failed
}

enum users_Role {
  Admin
  Restaurant
  Customer
  DeliveryPerson
}
