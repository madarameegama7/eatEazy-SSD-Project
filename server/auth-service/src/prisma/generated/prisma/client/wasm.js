
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.1
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.1",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.RefreshTokensScalarFieldEnum = {
  TokenID: 'TokenID',
  Token: 'Token',
  UserID: 'UserID',
  ExpiresAt: 'ExpiresAt',
  CreatedAt: 'CreatedAt',
  UpdatedAt: 'UpdatedAt'
};

exports.Prisma.UsersScalarFieldEnum = {
  UserID: 'UserID',
  Firstname: 'Firstname',
  Lastname: 'Lastname',
  PasswordHash: 'PasswordHash',
  Email: 'Email',
  Phone: 'Phone',
  Role: 'Role'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Users_Role = exports.$Enums.Users_Role = {
  Admin: 'Admin',
  Restaurant: 'Restaurant',
  Customer: 'Customer',
  DeliveryPerson: 'DeliveryPerson'
};

exports.Prisma.ModelName = {
  RefreshTokens: 'RefreshTokens',
  Users: 'Users'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "E:\\eatEazy-SSD-Project\\server\\auth-service\\src\\prisma\\generated\\prisma\\client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows"
      },
      {
        "fromEnvVar": null,
        "value": "darwin-arm64"
      },
      {
        "fromEnvVar": null,
        "value": "linux-musl-arm64-openssl-3.0.x"
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "E:\\eatEazy-SSD-Project\\server\\auth-service\\src\\prisma\\schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../../.env"
  },
  "relativePath": "../../..",
  "clientVersion": "6.16.1",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "generator client {\n  provider      = \"prisma-client-js\"\n  output        = \"./generated/prisma/client\"\n  binaryTargets = [\"windows\", \"darwin-arm64\", \"linux-musl-arm64-openssl-3.0.x\"]\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel RefreshTokens {\n  TokenID   Int      @id @default(autoincrement()) @map(\"tokenid\")\n  Token     String   @unique @map(\"token\")\n  UserID    Int      @map(\"userid\")\n  ExpiresAt DateTime @map(\"expiresat\")\n  CreatedAt DateTime @default(now()) @map(\"createdat\")\n  UpdatedAt DateTime @updatedAt @map(\"updatedat\")\n\n  user Users @relation(fields: [UserID], references: [UserID])\n\n  @@map(\"refreshtokens\")\n}\n\nmodel Users {\n  UserID       Int        @id @default(autoincrement()) @map(\"userid\")\n  Firstname    String     @map(\"firstname\") @db.VarChar(255)\n  Lastname     String     @map(\"lastname\") @db.VarChar(255)\n  PasswordHash String     @map(\"passwordhash\") @db.VarChar(255)\n  Email        String     @unique @map(\"email\") @db.VarChar(255)\n  Phone        String?    @map(\"phone\") @db.VarChar(15)\n  Role         Users_Role @map(\"role\")\n\n  refreshTokens RefreshTokens[]\n\n  @@map(\"users\")\n}\n\nenum Users_Role {\n  Admin\n  Restaurant\n  Customer\n  DeliveryPerson\n\n  @@map(\"users_role\")\n}\n",
  "inlineSchemaHash": "458988d09ac7da740a98860d97bd83a35aeb653ca496c738e6522596439fa9c2",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"RefreshTokens\":{\"fields\":[{\"name\":\"TokenID\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"tokenid\"},{\"name\":\"Token\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"token\"},{\"name\":\"UserID\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"userid\"},{\"name\":\"ExpiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"expiresat\"},{\"name\":\"CreatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"createdat\"},{\"name\":\"UpdatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updatedat\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"Users\",\"relationName\":\"RefreshTokensToUsers\"}],\"dbName\":\"refreshtokens\"},\"Users\":{\"fields\":[{\"name\":\"UserID\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"userid\"},{\"name\":\"Firstname\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"firstname\"},{\"name\":\"Lastname\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"lastname\"},{\"name\":\"PasswordHash\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"passwordhash\"},{\"name\":\"Email\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"email\"},{\"name\":\"Phone\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"phone\"},{\"name\":\"Role\",\"kind\":\"enum\",\"type\":\"Users_Role\",\"dbName\":\"role\"},{\"name\":\"refreshTokens\",\"kind\":\"object\",\"type\":\"RefreshTokens\",\"relationName\":\"RefreshTokensToUsers\"}],\"dbName\":\"users\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

